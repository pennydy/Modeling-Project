} else {
phoneme.units <- phoneme.units + phonolexical.activity[(62+(i-5)*19+1) : (62+(i-4)*19)]
}
}
for(n in 1:num){
if(phoneme.units[n,] < 0){
phoneme.units[n,] <- 0
}
}
}
print(phoneme.units)
# the response probability for consonants
phoneme.sum <- sum(phoneme.units)
# when it is the empty consonant/vowel -> keep them as zeros
if(phoneme.sum != 0){
phoneme.response.probability <- phoneme.units / phoneme.sum
} else {
phoneme.response.probability <- phoneme.units
}
if (i == 3 || i == 4){
all.phoneme.units[i] <- rbind(phoneme.units, NA, NA, NA, NA, NA, NA, NA)
} else{
all.phoneme.units[i] <- phoneme.units
}
phoneme.output <- c(phoneme.output, phoneme.response.probability[,1])
}
# print(all.phoneme.units)
phoneme.result <- list("prob" = phoneme.output, "units" = all.phoneme.units)
return (phoneme.result)
}
# inputs of the phonolexical level: 1. semantic activation (assuming seeing the picture will activate
# both the English and the Mandarin word for it); 2. phonemic activation
# output of the phonolexical level: how likely it is to be one of the 21 words (a vector of probabilities)
phonolexical.activation <- function(phoneme.input, visual.input){
# phonolexical.units <- rep(0,21)
for (cycle in 1:cycles){
phoneme.input.weight <- phoneme.input * phonolexical.excitatory.weight
for (n in 1:21){
# excitatory inputs include both the output of the phoneme level
# as well as the activation at the semantic level
phoneme.excitatory.input <- phonolexical.connections[, n] * phoneme.input.weight
phonolexical.units[n] <- phonolexical.units[n] + sum(phoneme.excitatory.input)
if (n %% 3 == 1){
index <- (n %/% 3) * 2 + 1
phonolexical.units[n] <- phonolexical.units[n] + visual.input[index] * eng.excitatory.weight
phonolexical.units[n+1] <- phonolexical.units[n+1] + visual.input[index] * ma.excitatory.weight
} else if (n %% 3 == 0) {
index <- (n %/% 3) * 2
phonolexical.units[n] <- phonolexical.units[n] + visual.input[index] * eng.excitatory.weight
phonolexical.units[n-1] <- phonolexical.units[n-1] + visual.input[index] * ma.excitatory.weight
}
# print(phonolexical.units)
if(phonolexical.units[n] < 0){
phonolexical.units[n] <- 0
}
}
inhibitory.activity <- numeric()
for(n in 1:21){
inhibitory.activity[n] <- sum(phonolexical.units[-n] * phonolexical.inhibitory.weight)
}
phonolexical.units <- phonolexical.units + inhibitory.activity
for(n in 1:21){
if(phonolexical.units[n] < 0){
phonolexical.units[n] <- 0
}
}
# print(phonolexical.units)
# print(phonolexical.response.probability)
}
# the response probability for words at phonolexical level
phonolexical.response.probability <- phonolexical.units / sum(phonolexical.units)
# return (phonolexical.response.probability)
phonolexical.result <- list("prob"=phonolexical.response.probability, "units"=phonolexical.units)
return(phonolexical.result)
}
# a vector to record the activity of each word at the semantic level
semantic.activation <- function(input){
# semantic.units <- rep(0,14)
for (cycle in 1:cycles){
input.weight <- input * semantic.excitatory.weight
print(input.weight)
for (n in 1:14){
excitatory.input <- semantic.connections[, n] * input.weight
# print(excitatory.input)
semantic.units[n] <- semantic.units[n] + sum(excitatory.input)
print(semantic.units)
if(semantic.units[n] < 0){
semantic.units[n] <- 0
}
}
# print(semantic.units)
inhibitory.activity <- numeric()
for(n in 1:14){
inhibitory.activity[n] <- sum(semantic.units[-n] * semantic.inhibitory.weight)
}
semantic.units <- semantic.units + inhibitory.activity
for(n in 1:14){
if(semantic.units[n] < 0){
semantic.units[n] <- 0
}
}
# print(semantic.units/sum(semantic.units))
# the response probability for words at semantic level
}
semantic.response.probability <- semantic.units / sum(semantic.units)
semantic.result <- list("prob"=semantic.response.probability, "units"=semantic.units)
return (semantic.result)
}
test.phonolexical.output <- rep(0, 21)
test.phoneme.output <- phoneme.activation(input.rain.sound, test.phonolexical.output)
print(test.phoneme.output)
all.phoneme.units <- test.phoneme.output$units
test.phonolexical.output <- phonolexical.activation(na.omit(test.phoneme.output$prob), input.rain.fish)
# test.phonolexical.output <- phonolexical.activation(na.omit(test.phoneme.output$prob), input.rain.tree)
print(test.phonolexical.output)
phonolexical.units <- test.phonolexical.output$units
test.semantic.output <- semantic.activation(test.phonolexical.output$prob)
# fei
fei <- c(
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1),
c(-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1))
#
lung <- c(
c(-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1),
c(-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1))
# bei
bei <- c(
c(-1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1),
c(-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1),
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1))
phonolexical.connections <- matrix(
c(tree, shu, book, eye, mu, wood, dam, ba, scar, arm, bi, coin, rain, yu, fish, toe, zhi, mole, fee, fei, lung),
ncol = 21
)
# semantic layer: receives signals from the visual stimulus and the output from the phonolexical level.
# Meanwhile, it also send feedback signals to nodes at the phonolexical level
# compare the target to the competitor to simulate the growth curve
overlap <- 0.65
# tree
tree.word <-
c(1, overlap, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# shu
# shu.word <-
#   c(-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# tu
book.word <-
c(-1, overlap, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# eye
eye.word <-
c(-1, -1, -1, 1, overlap, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# mu
# mu.word <-
#   c(-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# lu
wood.word <-
c(-1, -1, -1, -1, overlap, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# dam
dam.word <-
c(-1, -1, -1, -1, -1, -1, 1, overalp, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# ba
# ba.word <-
#   c(-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# wa
scar.word <-
c(-1, -1, -1, -1, -1, -1, -1, overlap, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# arm
arm.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, overlap, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# bi
# bi.word <-
#   c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# mi
coin.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, overlap, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# rain
rain.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, overlap, -1, -1, -1, -1, -1, -1, -1)
# yu
# yu.word <-
#   c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1)
# fish
fish.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, overlap, 1, -1, -1, -1, -1, -1, -1)
# toe
toe.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, overlap, -1, -1, -1, -1)
# zhi
# zhi.word <-
#   c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1)
# chi
mole.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, overlap, 1, -1, -1, -1)
# fee
fee.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, overlap, -1)
# fei
# fei.word <-
#   c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1)
# bei
lung.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, overlap, 1)
overlap <- 0.5
# tree
tree.word <-
c(1, overlap, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# shu
# shu.word <-
#   c(-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# tu
book.word <-
c(-1, overlap, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# eye
eye.word <-
c(-1, -1, -1, 1, overlap, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# mu
# mu.word <-
#   c(-1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# lu
wood.word <-
c(-1, -1, -1, -1, overlap, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# dam
dam.word <-
c(-1, -1, -1, -1, -1, -1, 1, overalp, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# ba
# ba.word <-
#   c(-1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# wa
scar.word <-
c(-1, -1, -1, -1, -1, -1, -1, overlap, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# arm
arm.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, overlap, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# bi
# bi.word <-
#   c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# mi
coin.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, overlap, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1)
# rain
rain.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, overlap, -1, -1, -1, -1, -1, -1, -1)
# yu
# yu.word <-
#   c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1)
# fish
fish.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, overlap, 1, -1, -1, -1, -1, -1, -1)
# toe
toe.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, overlap, -1, -1, -1, -1)
# zhi
# zhi.word <-
#   c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1)
# chi
mole.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, overlap, 1, -1, -1, -1)
# fee
fee.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, overlap, -1)
# fei
# fei.word <-
#   c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1)
# bei
lung.word <-
c(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, overlap, 1)
# nodes in the semantic layer are presented as a group of TWO:
# first one being the English target word, second one being competitor
semantic.connections <- matrix(
c(tree.word, book.word, eye.word, wood.word, dam.word, scar.word, arm.word, coin.word,
rain.word, fish.word, toe.word, mole.word, fee.word, lung.word),
ncol = 14
)
# input: rain -> this is only for testing the semantic layer
# input.rain.word <-
#   c(0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0)
# input: rain (phonolexical level) -> this is only for testing the phonolexical layer
# input.rain <- cbind.fill(
#   c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0),
#   c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
#   c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0),
#   c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0),
#   c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0),
#   c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
#   fill=NA)
# input: r
input.r <- c(c(1, 0),
c(0, 1),
c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 0, 1, 0))
input.n <- c(c(1, 0),
c(0, 1),
c(0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0),
c(0, 1, 0, 0, 0, 0, 0, 0, 0))
# input: e
input.e <- c(c(1, 0), c(0, 1), c(1, 0, 0), c(0, 1, 0, 0))
# input: ɪ
input.ɪ <- c(c(0, 1), c(0, 1), c(1, 0, 0), c(1, 0, 0, 0))
# input: empty consonant
input.empty.consonant <- c(c(0, 0),
c(0, 0),
c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
c(0, 0, 0, 0, 0, 0, 0, 0, 0))
# input: empty vowel
input.empty.vowel <- c(c(0, 0), c(0, 0), c(0, 0, 0), c(0, 0, 0, 0))
input.empty.sound <- cbind.fill(
input.empty.consonant, input.empty.consonant, input.empty.vowel, input.empty.vowel,
input.empty.consonant, input.empty.consonant,
fill=NA
)
input.rain.sound <- cbind.fill(
input.r, input.empty.consonant, input.e, input.ɪ, input.n, input.empty.consonant,
fill=NA
)
input.rain.fish <- c(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0)
input.rain.tree <- c(1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0)
# building the model
# a vector to record the activity each consonant/vowel
# consonant.units <- rep(0, 19)
# vowel.units <- rep(0,12)
all.phoneme.units <- cbind.fill(
c(rep(0,19)), c(rep(0,19)), c(rep(0,12)), c(rep(0,12)), c(rep(0,19)), c(rep(0,19)),
fill=NA
)
phoneme.excitatory.weight <- 0.5
phoneme.inhibitory.weight <- -0.1
# a vector to record the activity of each of the 21 CCVVCC representations at the phonolexical layer
phonolexical.units <- rep(0,21)
phonolexical.excitatory.weight <- 0.5
phonolexical.inhibitory.weight <- -0.01
eng.excitatory.weight <- 0.4
ma.excitatory.weight <- 0.3
# a vector to record the activity of each of the 14 words at the semantic layer
semantic.units <- rep(0,14)
semantic.excitatory.weight <- 0.5
semantic.inhibitory.weight <- -0.1
cycles <- 5
# activation function at the phoneme level
phoneme.activation <- function(sound.input, phonolexical.feedback){
phoneme.output <- c()
for(i in 1:6){
phoneme <- na.omit(sound.input[i])
if (i == 3 || i == 4) {
is.consonant <- FALSE
# phoneme.units <- vowel.units
num <- 12
} else {
is.consonant <- TRUE
# phoneme.units <- consonant.units
num <- 19
}
phoneme.units <- na.omit(all.phoneme.units[i])
for (cycle in cycles){
input.weight <- phoneme * phoneme.excitatory.weight
# excitatory connection within the phoneme layer
for (n in 1:num){
# if it is a consonant
if (is.consonant) {
excitatory.input <- consonant.connections[, n] * input.weight
}
# if it is a vowel
else {
excitatory.input <- vowel.connections[, n] * input.weight
}
phoneme.units[n,] <- phoneme.units[n,] + sum(excitatory.input)
if(phoneme.units[n,] < 0){
phoneme.units[n,] <- 0
}
}
# inhibitory connection within the phoneme layer
inhibitory.activity <- numeric()
for(n in 1:num){
inhibitory.activity[n] <- sum(phoneme.units[-n,] * phoneme.inhibitory.weight)
}
phoneme.units <- phoneme.units + inhibitory.activity
# activation from the phonolexical layer feedback
for(n in 1:21){
phonolexical.activity <- phonolexical.feedback[n] * phonolexical.connections[, n]
if (i == 1 || i == 2){
phoneme.units <- phoneme.units + phonolexical.activity[((i-1)*19+1) : (i*19)]
} else if (i == 3 || i == 4){
phoneme.units <- phoneme.units + phonolexical.activity[(38+(i-3)*12+1) : (38+(i-2)*12)]
} else {
phoneme.units <- phoneme.units + phonolexical.activity[(62+(i-5)*19+1) : (62+(i-4)*19)]
}
}
for(n in 1:num){
if(phoneme.units[n,] < 0){
phoneme.units[n,] <- 0
}
}
}
print(phoneme.units)
# the response probability for consonants
phoneme.sum <- sum(phoneme.units)
# when it is the empty consonant/vowel -> keep them as zeros
if(phoneme.sum != 0){
phoneme.response.probability <- phoneme.units / phoneme.sum
} else {
phoneme.response.probability <- phoneme.units
}
if (i == 3 || i == 4){
all.phoneme.units[i] <- rbind(phoneme.units, NA, NA, NA, NA, NA, NA, NA)
} else{
all.phoneme.units[i] <- phoneme.units
}
phoneme.output <- c(phoneme.output, phoneme.response.probability[,1])
}
# print(all.phoneme.units)
phoneme.result <- list("prob" = phoneme.output, "units" = all.phoneme.units)
return (phoneme.result)
}
# inputs of the phonolexical level: 1. semantic activation (assuming seeing the picture will activate
# both the English and the Mandarin word for it); 2. phonemic activation
# output of the phonolexical level: how likely it is to be one of the 21 words (a vector of probabilities)
phonolexical.activation <- function(phoneme.input, visual.input){
# phonolexical.units <- rep(0,21)
for (cycle in 1:cycles){
phoneme.input.weight <- phoneme.input * phonolexical.excitatory.weight
for (n in 1:21){
# excitatory inputs include both the output of the phoneme level
# as well as the activation at the semantic level
phoneme.excitatory.input <- phonolexical.connections[, n] * phoneme.input.weight
phonolexical.units[n] <- phonolexical.units[n] + sum(phoneme.excitatory.input)
if (n %% 3 == 1){
index <- (n %/% 3) * 2 + 1
phonolexical.units[n] <- phonolexical.units[n] + visual.input[index] * eng.excitatory.weight
phonolexical.units[n+1] <- phonolexical.units[n+1] + visual.input[index] * ma.excitatory.weight
} else if (n %% 3 == 0) {
index <- (n %/% 3) * 2
phonolexical.units[n] <- phonolexical.units[n] + visual.input[index] * eng.excitatory.weight
phonolexical.units[n-1] <- phonolexical.units[n-1] + visual.input[index] * ma.excitatory.weight
}
# print(phonolexical.units)
if(phonolexical.units[n] < 0){
phonolexical.units[n] <- 0
}
}
inhibitory.activity <- numeric()
for(n in 1:21){
inhibitory.activity[n] <- sum(phonolexical.units[-n] * phonolexical.inhibitory.weight)
}
phonolexical.units <- phonolexical.units + inhibitory.activity
for(n in 1:21){
if(phonolexical.units[n] < 0){
phonolexical.units[n] <- 0
}
}
# print(phonolexical.units)
# print(phonolexical.response.probability)
}
# the response probability for words at phonolexical level
phonolexical.response.probability <- phonolexical.units / sum(phonolexical.units)
# return (phonolexical.response.probability)
phonolexical.result <- list("prob"=phonolexical.response.probability, "units"=phonolexical.units)
return(phonolexical.result)
}
# a vector to record the activity of each word at the semantic level
semantic.activation <- function(input){
# semantic.units <- rep(0,14)
for (cycle in 1:cycles){
input.weight <- input * semantic.excitatory.weight
print(input.weight)
for (n in 1:14){
excitatory.input <- semantic.connections[, n] * input.weight
# print(excitatory.input)
semantic.units[n] <- semantic.units[n] + sum(excitatory.input)
print(semantic.units)
if(semantic.units[n] < 0){
semantic.units[n] <- 0
}
}
# print(semantic.units)
inhibitory.activity <- numeric()
for(n in 1:14){
inhibitory.activity[n] <- sum(semantic.units[-n] * semantic.inhibitory.weight)
}
semantic.units <- semantic.units + inhibitory.activity
for(n in 1:14){
if(semantic.units[n] < 0){
semantic.units[n] <- 0
}
}
# print(semantic.units/sum(semantic.units))
# the response probability for words at semantic level
}
semantic.response.probability <- semantic.units / sum(semantic.units)
semantic.result <- list("prob"=semantic.response.probability, "units"=semantic.units)
return (semantic.result)
}
test.phonolexical.output <- rep(0, 21)
test.phoneme.output <- phoneme.activation(input.rain.sound, test.phonolexical.output)
print(test.phoneme.output)
all.phoneme.units <- test.phoneme.output$units
test.phonolexical.output <- phonolexical.activation(na.omit(test.phoneme.output$prob), input.rain.fish)
# test.phonolexical.output <- phonolexical.activation(na.omit(test.phoneme.output$prob), input.rain.tree)
print(test.phonolexical.output)
phonolexical.units <- test.phonolexical.output$units
test.semantic.output <- semantic.activation(test.phonolexical.output$prob)
print(test.semantic.output)
source('~/Documents/GitHub/Modeling-Project/Model.R', echo=TRUE)
source('~/Documents/GitHub/Modeling-Project/Model.R', echo=TRUE)
